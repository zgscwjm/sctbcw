package com.sctbc.controller;

import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.sctbc.constant.Common_Base;
import com.sctbc.constant.Common_ShortPeriodEstimate;
import com.sctbc.entity.Deptinfo;
import com.sctbc.entity.Shortperiodestimate;
import com.sctbc.entity.Teachstaffinfo;
import com.sctbc.entity.Trainapply;
import com.sctbc.entity.Traininfo;
import com.sctbc.entity.User;
import com.sctbc.server_i.IDeptInfo;
import com.sctbc.server_i.IShortPeriodEstimate;
import com.sctbc.server_i.ITeachStaffInfo;
import com.sctbc.server_i.ITrainApply;
import com.sctbc.server_i.ITrainInfo;
import com.sctbc.server_i.IUser;

@Controller
@RequestMapping(Common_Base.COMMON_SHORTPERIODESTIMATE)
public class ShortPeriodEstimateController {
	private static final String LISTPATH = "/sctbc/Page/shortPeriodEstimate/list";
	private static final String ADDPATH = "/sctbc/Page/shortPeriodEstimate/add";
	private static final String EDITPATH = "/sctbc/Page/shortPeriodEstimate/edit";
	private static final String SEEPATH = "/sctbc/Page/shortPeriodEstimate/one";

	public boolean result = true;

	@Autowired
	ITrainInfo iTrainInfo;
	@Autowired
	ITrainApply iTrainapply;
	@Autowired
	IUser iUser;
	@Autowired
	IDeptInfo iDeptInfo;
	@Autowired
	ITeachStaffInfo iTeachstaffinfo;
	@Autowired
	IShortPeriodEstimate iShortPeriodEstimate;

	@RequestMapping(value = Common_ShortPeriodEstimate.SHORTPERIODESTIMATE_GETSHORTPERIODESTIMATEALL)
	public String getShortPeriodEstimateAll(Model model,HttpSession session) {
		List<Shortperiodestimate> shortperiodestimateList =null;

		User loginuser = (User) session.getAttribute("USER");
		if (loginuser.getRoles().getRoleId() == 9) {
			shortperiodestimateList = iShortPeriodEstimate
					.getShortperiodestimateBytrainUserID(loginuser.getUserId());
			System.out.println(shortperiodestimateList.size());
		} else {
		shortperiodestimateList = iShortPeriodEstimate
				.getList();
		}
		model.addAttribute("shortperiodestimateList", shortperiodestimateList);
		return LISTPATH;
	}
	@ResponseBody
	@RequestMapping(value = Common_ShortPeriodEstimate.SHORTPERIODESTIMATE_ADDSHORTPERIODESTIMATE)
	public String addShortPeriodEstimate(Model model,
			Shortperiodestimate shortPeriodEstimate, String TrainUserId,
			String EvaluateUserId, int projectID) {

		Traininfo trainInfo = iTrainInfo.getTraininfoById(projectID);
			System.out.println("userid"+TrainUserId);
		User trainUser = iUser.getById(TrainUserId);
		User evaluateUser = iUser.getById(EvaluateUserId);
		if (iShortPeriodEstimate.getDepShortperiodestimateAllIHas(evaluateUser,
				trainUser, trainInfo).size() == 0) {
		shortPeriodEstimate.setUserByEvaluateUserId(evaluateUser);
		shortPeriodEstimate.setUserByTrainUserId(trainUser);
		shortPeriodEstimate.setTraininfo(trainInfo);

		result = iShortPeriodEstimate
				.addShortPeriodEstimate(shortPeriodEstimate);
		}
		return result + "";
	}
	@ResponseBody
	@RequestMapping(value = Common_ShortPeriodEstimate.SHORTPERIODESTIMATE_EDITSHORTPERIODESTIMATE)
	public String editShortPeriodEstimate(Model model,
			Shortperiodestimate shortPeriodEstimate) {
		boolean result = iShortPeriodEstimate.upData(shortPeriodEstimate);
		return result + "";
	}
	@ResponseBody
	@RequestMapping(value = Common_ShortPeriodEstimate.SHORTPERIODESTIMATE_DELSHORTPERIODESTIMATE)
	public String delShortPeriodEstimate() {
		return result + "";
	}

	@RequestMapping(value = Common_ShortPeriodEstimate.SHORTPERIODESTIMATE_ADDSHORTPERIODESTIMATEINDEX)
	public String addShortPeriodEstimateIndex(Model model, HttpSession session) {
		User loginuser = (User) session.getAttribute("USER");


		int userlevel = 0;// 0：普通老师；1：部门领导；2：学校领导；


		List<Trainapply> TrainapplyList = iTrainapply
				.getTrainapplyByCheck(loginuser.getUserId());


		List<Deptinfo> deptInfoList = iDeptInfo.getDeptinfoByLeader(loginuser
				.getUserId());

		List<Teachstaffinfo> teachstaffinfoList = null;
		if (deptInfoList.size() != 0) {
			System.out.println(" leader is run");
			userlevel = 1;
			
			System.out.println("id is:"+deptInfoList.get(0).getId());
			teachstaffinfoList = iTeachstaffinfo
					.getTeachstaffinfoByDepId(deptInfoList.get(0).getId());
			System.out.println("list size is:"+teachstaffinfoList.size());
		}
		else {
			
			teachstaffinfoList = iTeachstaffinfo.getTeachstaffinfoByUserId(loginuser.getUserId());
		}
		model.addAttribute("teachstaffinfoList", teachstaffinfoList);
		model.addAttribute("userlevel", userlevel);
		model.addAttribute("TrainapplyList", TrainapplyList);

		return ADDPATH;
	}
	@RequestMapping(value = Common_ShortPeriodEstimate.SHORTPERIODESTIMATE_EDITSHORTPERIODESTIMATEINDEX)
	public String editShortPeriodEstimateIndex(Model model, int id) {
		Shortperiodestimate shortPeriodEstimate = iShortPeriodEstimate
				.getById(id);
		model.addAttribute("shortPeriodEstimate", shortPeriodEstimate);
		return EDITPATH;
	}

	@RequestMapping(value = Common_ShortPeriodEstimate.SHORTPERIODESTIMATE_SEESHORTPERIODESTIMATEBYONE)
	public String getShortPeriodEstimatebyOne(Model model, int id) {
		Shortperiodestimate shortPeriodEstimate = iShortPeriodEstimate
				.getById(id);
		model.addAttribute("shortPeriodEstimate", shortPeriodEstimate);
		return SEEPATH;
	}
}
